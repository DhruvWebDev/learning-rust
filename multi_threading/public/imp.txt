//Since our new thread runs in parallel, the stack frame containing x and y may well have
//disappeared by the time we try to use them. Even if we call thr.join() within foo (which
//blocks until thr has completed, ensuring the stack frame won't disappear), we will not
//succeed: the compiler cannot prove that this behavior is safe, and so won't let us do it.

//The solution to this problem is usually to switch to using a move closure. This approach
//moves (or copies, where possible) data into the closure, rather than taking references to
//it. For example:

//fn foo() -> Box<Fn(u32) -> u32> {
//    let x = 0u32;
//    Box::new(move |y| x + y)
//}


// // main.rs or lib.rs
// pub fn add(a: i32, b: i32) -> i32 {
//     a + b
// }

// #[cfg(test)]
// mod tests {
//     use super::*;

//     #[test]
//     fn it_works() {
//         let result = result(2, 2);
//         assert_println!("{:?}", v)handle1.join().unwrap();
